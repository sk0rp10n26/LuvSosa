//#include <iostream>
//#include <string>
//
//using namespace std;
//
//int main() {
//    setlocale(LC_ALL, "Russian");
//    int p;
//    int number;
//    string result = "";
//
//    // Ввод основания системы счисления
//    cout << "Введите основание системы счисления (2 <= p <= 16): ";
//    cin >> p;
//    // Ввод числа в десятичной системе
//    cout << "Введите положительное целое число N: ";
//    cin >> number;
//    cout << number << "(10) = ";
//    // Конвертация числа из десятичной системы в указанную
//    while (number > 0) {
//        int remainder = number % p;
//        // Преобразуем остаток в символ
//        if (remainder < 10)
//            result += to_string(remainder);
//        else
//            result += char(remainder - 10 + 'A'); // Для оснований больше 10
//        number /= p;
//    }
//
//    // Переворот строки вручную
//    string reversedResult = "";
//    for (int i = result.length() - 1; i >= 0; i--) {
//        reversedResult += result[i];
//    }
//
//    // Вывод результата
//    cout << reversedResult << "(" << p << ")" << endl;
//
//    return 0;
//}

//#include <iostream>
//#include <string>
//#include <cmath>
//
//using namespace std;
//
//int main() {
//    setlocale(LC_ALL, "Russian");
//    int p; // Основание системы счисления
//    string number; // Число в системе счисления p
//
//    // Ввод основания системы счисления
//    cout << "Введите основание системы счисления (2 <= p <= 16): ";
//    cin >> p;
//
//    // Ввод числа
//    cout << "Введите число в системе счисления " << p << ": ";
//    cin >> number;
//
//    // Преобразование числа в десятичную систему
//    int decimalValue = 0;
//    for (char digit : number) {
//        int value;
//
//        // Определяем значение цифры
//        if (digit >= '0' && digit <= '9') {
//            value = digit - '0'; // Преобразуем символ в число
//        }
//        else if (digit >= 'A' && digit <= 'F') {
//            value = digit - 'A' + 10; // Преобразуем символ в число
//        }
//
//        // Применяем схему Горнера
//        decimalValue = decimalValue * p + value;
//    }
//
//    // Вывод результата
//    cout << number << "(" << p << ") = " << decimalValue << "(10)" << endl;
//
//    return 0;
//}


//#include <iostream>
//#include <string>
//
//using namespace std;
//
//int main() {
//    setlocale(LC_ALL, "Russian");
//    int p, N, M;
//
//    cout << "Введите основание системы счисления (2 <= p <= 16): ";
//    cin >> p; // Считываем основание системы счисления
//    cout << "Введите два положительных целых числа (N и M): ";
//    cin >> N >> M; // Считываем два положительных целых числа
//
//    // Перевод N в систему с основанием p
//    string N_p = ""; // Инициализируем пустую строку для хранения результата
//    int tempN = N; // Копируем значение N для преобразования
//    while (tempN > 0) { // Цикл для перевода числа в нужную систему счисления
//        int remainder = tempN % p; // Вычисляем остаток от деления
//        if (remainder < 10) {
//            N_p += (remainder + '0'); // Добавляем цифру (0-9)
//        }
//        else {
//            N_p += (remainder - 10 + 'A'); // Добавляем букву (A-F)
//        }
//        tempN /= p; // Делим на основание для перехода к следующему разряду
//    }
//
//    // Переворот строки N_p
//    string reversed_N_p = ""; // Инициализируем пустую строку для перевернутого результата
//    for (int i = N_p.length() - 1; i >= 0; i--) { // Переворачиваем строку
//        reversed_N_p += N_p[i]; // Добавляем символы в обратном порядке
//    }
//    N_p = reversed_N_p; // Присваиваем перевернутую строку обратно
//
//    // Перевод M в систему с основанием p (аналогично с N)
//    string M_p = "";
//    int tempM = M;
//    while (tempM > 0) { 
//        int remainder = tempM % p;
//        if (remainder < 10) {
//            M_p += (remainder + '0');
//        }
//        else {
//            M_p += (remainder - 10 + 'A');
//        }
//        tempM /= p;
//    }
//
//    // Переворот строки M_p
//    string reversed_M_p = ""; 
//    for (int i = M_p.length() - 1; i >= 0; i--) { 
//        reversed_M_p += M_p[i];
//    }
//    M_p = reversed_M_p; 
//
//    // Сложение N_p и M_p в системе с основанием p
//    string sum_p = ""; // Инициализируем пустую строку для хранения суммы
//    int carry = 0; // Переменная для переноса
//    int maxLength; // Объявление переменной для хранения максимальной длины
//
//    // Определение максимальной длины
//    if (N_p.length() >= M_p.length()) {
//        maxLength = N_p.length(); // Если N_p длиннее или равно M_p
//    }
//    else {
//        maxLength = M_p.length(); // Если M_p длиннее
//    }
//
//    for (int i = 0; i < maxLength; i++) { // Цикл для сложения разрядов
//        int digitN = 0; // Инициализация переменной для хранения текущего разряда N
//        if (i < N_p.length()) { // Проверяем, есть ли текущий разряд в N_p
//            if (N_p[N_p.length() - 1 - i] <= '9') {
//                digitN = N_p[N_p.length() - 1 - i] - '0'; // Извлекаем цифровое значение
//            }
//            else {
//                digitN = N_p[N_p.length() - 1 - i] - 'A' + 10; // Извлекаем буквенное значение
//            }
//        }
//
//        int digitM = 0; // Инициализация переменной для хранения текущего разряда M
//        if (i < M_p.length()) { // Проверяем, есть ли текущий разряд в M_p
//            if (M_p[M_p.length() - 1 - i] <= '9') {
//                digitM = M_p[M_p.length() - 1 - i] - '0'; // Извлекаем цифровое значение
//            }
//            else {
//                digitM = M_p[M_p.length() - 1 - i] - 'A' + 10; // Извлекаем буквенное значение
//            }
//        }
//
//        int sum = digitN + digitM + carry; // Суммируем текущие разряды и перенос
//        carry = sum / p; // Вычисляем новый перенос
//        sum = sum % p; // Оставшаяся часть в текущем разряде
//
//        // Добавляем результат в сумму
//        if (sum < 10) {
//            sum_p += (sum + '0'); // Добавляем цифру (0-9)
//        }
//        else {
//            sum_p += (sum - 10 + 'A'); // Добавляем букву (A-F)
//        }
//    }
//
//    // Если остался перенос, добавляем его
//    if (carry > 0) {
//        if (carry < 10) {
//            sum_p += (carry + '0'); // Добавляем цифру переноса (0-9)
//        }
//        else {
//            sum_p += (carry - 10 + 'A'); // Добавляем букву переноса (A-F)
//        }
//    }
//
//    // Переворот строки sum_p
//    string reversed_sum_p = ""; // Инициализируем пустую строку для перевернутого результата
//    for (int i = sum_p.length() - 1; i >= 0; i--) { // Переворачиваем строку суммы
//        reversed_sum_p += sum_p[i]; // Добавляем символы в обратном порядке
//    }
//    sum_p = reversed_sum_p; // Присваиваем перевернутую строку обратно
//
//    // Вывод результата
//    cout << N << "(10) + " << M << "(10) = "
//        << N_p << "(" << p << ") + "
//        << M_p << "(" << p << ") = "
//        << sum_p << "(" << p << ")" << endl;
//
//    return 0; // Завершаем выполнение программы
//}

#include <iostream> 
#include <string>
using namespace std;

int main() {
    int n1, N, n; // Объявление переменных
     //Цикл для перебора чисел от 27 до 80
    for (n = 27; n <= 80; n++)
    {
        string ostatki, ostatok; // Строки для хранения остатков и результата
        n1 = n; 
        // Преобразование числа n1 в троичную систему
        while (n1 > 0)
        {
            N = n1 % 3;
            ostatok += N + '0'; // Добавляем цифру в строку, преобразуя её в символ
            n1 = n1 / 3; 
        }

        string reversed_A_p = ""; // Строка для хранения перевернутого числа
        // Реверсируем строку остатков, так как они добавлены в обратном порядке
        for (int i = ostatok.length() - 1; i >= 0; i--) {
            reversed_A_p += ostatok[i]; // Добавляем цифры в обратном порядке
        }
        ostatki = reversed_A_p; // Сохраняем перевернутую строку в переменную ostatki

        // Проверка на уникальность цифр (чтобы одинаковые цифры не стояли рядом)
        if (ostatki[0] != ostatki[1] && ostatki[1] != ostatki[2] && ostatki[2] != ostatki[3]) {
            // Если все условия выполнены, выводим число в десятичной и троичной системах
            cout << n << "(10) = " << ostatki << "(3)" << endl;
            //za Stalina
            //Brezhnev BarugAAA
        }
    }
}